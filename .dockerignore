# Frontend exclusions removed so build systems (Nixpacks / Docker) can
# include the frontend/react-app folder during image builds. This ensures
# the `cd frontend/react-app && npm install && npm run build` step finds
# the frontend code. (If you need to re-exclude for local reasons, adjust
# your CI/CD or Dockerfile instead.)

# Dependencies
node_modules/
*/node_modules/
**/node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
*/package-lock.json
**/package-lock.json

# Git
.git/
.github/
.gitignore
.gitattributes

# All uploads and media
backend/uploads/**
uploads/**
*.pdf
*.pptx
*.ppt
*.doc
*.docx
*.jpg
*.jpeg
*.png
*.gif
*.mp4
*.mp3

# Development files
*.md
README.md
DEPLOYMENT.md
EASY-DEPLOYMENT-GUIDE.md
.env.local
.env.development
.env.test

# IDE
.vscode/
.idea/
*.swp
*.swo
*.sublime*

# OS files
.DS_Store
Thumbs.db
desktop.ini

# Debug and test files
debug.js
debug-teacher.js
**/*.test.js
**/*.spec.js
**/tests/
**/test/
__tests__/

# Deployment helpers
deploy.sh
deploy.bat
deploy-helper.bat
.deployment

# Build artifacts
dist/
build/
.next/
.vite/
.cache/

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Lock files (will be regenerated)
yarn.lock
pnpm-lock.yaml

# Ensure lockfiles required by `npm ci` are included in the Docker build context.
# Previously package-lock.json was ignored which caused `npm ci` in the image to
# fail because lockfiles were missing. Re-include the common lockfile locations
# (root, backend, and frontend/react-app).
!package-lock.json
!backend/package-lock.json
!frontend/react-app/package-lock.json
